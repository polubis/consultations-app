DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'task_status') THEN
        CREATE TYPE public.task_status AS ENUM ('todo', 'pending', 'done');
        RAISE NOTICE 'Type public.task_status created.';
    ELSE
        RAISE NOTICE 'Type public.task_status already exists, skipping creation.';
    END IF;
END;
$$;

CREATE TABLE public.tasks (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    status public.task_status DEFAULT 'todo' NOT NULL,
    name text NOT NULL,
    description text,
    status_history jsonb DEFAULT jsonb_build_array(jsonb_build_object('ts', now(), 'st', 'todo')) NOT NULL,
    m_date timestamp with time zone DEFAULT now() NOT NULL,
    c_date timestamp with time zone DEFAULT now() NOT NULL,

    CONSTRAINT name_length CHECK (char_length(name) >= 1 AND char_length(name) <= 200),
    CONSTRAINT description_length CHECK (description IS NULL OR (char_length(description) >= 10 AND char_length(description) <= 500))
);

COMMENT ON TABLE public.tasks IS 'Stores user tasks.';
COMMENT ON COLUMN public.tasks.status_history IS 'JSONB array storing status change history: [{"ts": timestamp, "st": status}]';

CREATE INDEX idx_tasks_user_id ON public.tasks(user_id);

CREATE OR REPLACE FUNCTION public.handle_task_update()
RETURNS TRIGGER AS $$
BEGIN
  NEW.m_date = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

COMMENT ON FUNCTION public.handle_task_update() IS 'Trigger function to automatically update m_date on task modification.';

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'on_task_update' AND tgrelid = 'public.tasks'::regclass) THEN
    CREATE TRIGGER on_task_update
      BEFORE UPDATE ON public.tasks
      FOR EACH ROW
      EXECUTE FUNCTION public.handle_task_update();
    RAISE NOTICE 'Trigger on_task_update created for table public.tasks.';
  ELSE
      RAISE NOTICE 'Trigger on_task_update already exists for table public.tasks, skipping creation.';
  END IF;
END;
$$;

ALTER TABLE public.tasks ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE public.tasks IS 'Stores user tasks. RLS enabled.';

CREATE POLICY "Allow individual select access"
  ON public.tasks
  FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Allow individual insert access"
  ON public.tasks
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow individual update access"
  ON public.tasks
  FOR UPDATE
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Allow individual delete access"
  ON public.tasks
  FOR DELETE
  USING (auth.uid() = user_id);